var gameState = new GameState();var mineContainer = new MineContainer();var w = window.innerWidth    || document.documentElement.clientWidth    || document.body.clientWidth;var h = window.innerHeight    || document.documentElement.clientHeight    || document.body.clientHeight -50;var land;var enemies = [];var explosions;var cursors;var playerTank = null;var map = null;var road;var aiming;var game = new Phaser.Game(w, h, Phaser.AUTO, 'game', gameState);var host = 'localhost:3000';var socket = io.connect(host);socket.on('connected', function (data) {        map = new Map(game, 640, 640);        playerTank = new Tank(game, data, socket);        askForData(w, h);});socket.on('enemyAdded', function (data) {    addEnemy(data);});function addEnemy(data){    if(playerTank){        for(var i in enemies){            if(enemies[i].getId() == data.playerId){                return;            }        }        enemies.push(new EnemyTank(game, { playerId: data['playerId'], peerId: data['peerId'], socket: socket, x: data['x'], y: data['y'], isHost: data['isHost']}, {}, playerTank.getPeer()));        socket.emit('addedToGame', { playerId: data['playerId']});    } else {        setTimeout(function(){            addEnemy(data);        }, 500)    }}socket.on('enemyDeleted', function (data) {    for(var i in enemies){        if(enemies[i].getId() == data.playerId){            enemies[i].remove();            enemies[i] = null;            enemies.splice(i, 1);        }    }});socket.on('setTiles', function (data) {    if(map){        map.setTiles(data);    }});var askForData = function(width, height){    if(undefined != width && undefined != height){        var playerData = gameState.getDataForServer();        var gameData = {width: width, height: height};        socket.emit('getData', {playerData:playerData, gameData: gameData});    } else {        socket.emit('getData', gameState.getDataForServer());    }    setTimeout(function(){        askForData();    }, 1000);}socket.on('dataReceived', function (data) {    gameState.applyServerData(data, function(){       askForData();    });});//setInterval(function(){//    if(playerTank != null && playerTank.peerId != null) {//        var data = playerTank.getData();//        for (var i = 0; i < enemies.length; i++) {//            if (enemies[i].isAlive()) {//                enemies[i].sendData(data);//            }//        }//    }//},60)